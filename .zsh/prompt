setopt PROMPT_SUBST

parse_git_branch() {
  (command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
}

parse_git_untracked() {
  (command git status --porcelain | grep "^??") 2>/dev/null
}

parse_git_modified() {
  (command git status --porcelain | grep "^\s*[MA]") 2>/dev/null
}

parse_git_unpushed() {
  (command git cherry -v) 2>/dev/null
}

git_dirty_state() {
  local git_untracked="$(parse_git_untracked)"
  local git_modified="$(parse_git_modified)"
  local color="green"

  if [ -n "$git_modified" ]; then
    color="yellow"
  elif [ -n "$git_untracked" ]; then
    color="blue"
  fi

  echo "%{$fg_bold[$color]%}»%{$reset_color%}"
}

git_branch() {
  local git_where="$(parse_git_branch)"
  local git_unpushed="$(parse_git_unpushed)"
  local branch_name="${git_where#(refs/heads/|tags/)}"
  local color="green"

  if [ -n "$git_unpushed" ]; then
    color="yellow"
  fi

  [ -n "$git_where" ] && echo "[%{$fg_bold[$color]%}${branch_name}%{$reset_color%}]"
}

prompt_status() {
  local git_where="$(parse_git_branch)"
  if [ -n "$git_where" ]; then
    echo "$(git_dirty_state)"
  else
    echo "»"
  fi
}

PROMPT='%~$(git_branch) $(prompt_status) '
